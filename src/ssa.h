typedef enum SSA_Code : U16 {
  SSA_CALL,     // n_args U16, n_konts U16, disp U32, arg_0 U16, ..., kont_0 U32, ...
  SSA_FUNC,     // n_args U16, n_konts U16, type_0 U16, ...
  SSA_GOTO,     // n_args U16, disp U32, arg_0 U16, ...
  SSA_INST_11_, // prim U16, arg_0 U16
  SSA_INST_1_0, // prim U16, arg_0 U16
  SSA_INST_1_2, // prim U16, arg_0 U16, disp_0 U32, disp_1 U32
  SSA_INST_20_, // prim U16, arg_0 U16, arg_1 U16
  SSA_INST_21_, // prim U16, arg_0 U16, arg_1 U16
  SSA_INST_2_2, // prim U16, arg_0 U16, arg_1 U16, disp_0 U32, disp_1 U32
  SSA_INST_30_, // prim U16, arg_0 U16, arg_1 U16, arg_2 U16
  SSA_INST_31_, // prim U16, arg_0 U16, arg_1 U16, arg_2 U16
  SSA_LABEL,    // n_args U16, type_0 U16, ...
  SSA_RETURN,   // n_args U16, kont_index U16, arg_0 U16, ...
  SSA_TAIL      // n_args U16, disp U32, arg_0 U16, ...
} SSA_Code;

typedef enum SSA_Inst : U16 {
  SSA_OP_ABORT,
  SSA_OP_GOTO,
  SSA_OP_IF,
  SSA_OP_LABEL,
  SSA_OP_NOP,
  SSA_OP_RETURN,
  SSA_OP_SELECT,
  SSA_OP_CONST_BOOL,
  SSA_OP_CONST_F32,
  SSA_OP_CONST_F64,
  SSA_OP_CONST_I32,
  SSA_OP_CONST_I5,
  SSA_OP_CONST_I6,
  SSA_OP_CONST_I64,
  SSA_OP_CONST_V256,
  SSA_OP_BOOL_AND,
  SSA_OP_BOOL_IS_EQ,
  SSA_OP_BOOL_IS_LE,
  SSA_OP_BOOL_IS_LT,
  SSA_OP_BOOL_NOT,
  SSA_OP_BOOL_OR,
  SSA_OP_F32_ABS,
  SSA_OP_F32_ADD,
  SSA_OP_F32_DIV,
  SSA_OP_F32_IROUND32,
  SSA_OP_F32_IROUND64,
  SSA_OP_F32_IS_EQ,
  SSA_OP_F32_IS_LE,
  SSA_OP_F32_IS_LT,
  SSA_OP_F32_MUL,
  SSA_OP_F32_ROUND,
  SSA_OP_F32_SQRT,
  SSA_OP_F32_SUB,
  SSA_OP_F32_TO_F64,
  SSA_OP_F32_TO_I32_BITWISE,
  SSA_OP_F64_ABS,
  SSA_OP_F64_ADD,
  SSA_OP_F64_DIV,
  SSA_OP_F64_IROUND32,
  SSA_OP_F64_IROUND64,
  SSA_OP_F64_IS_EQ,
  SSA_OP_F64_IS_LE,
  SSA_OP_F64_IS_LT,
  SSA_OP_F64_MUL,
  SSA_OP_F64_ROUND,
  SSA_OP_F64_SQRT,
  SSA_OP_F64_SUB,
  SSA_OP_F64_TO_F32,
  SSA_OP_F64_TO_I64_BITWISE,
  SSA_OP_I32_ADD,
  SSA_OP_I32_BIT_AND,
  SSA_OP_I32_BIT_NOT,
  SSA_OP_I32_BIT_OR,
  SSA_OP_I32_BIT_XOR,
  SSA_OP_I32_CLZ,
  SSA_OP_I32_CTZ,
  SSA_OP_I32_IS_EQ,
  SSA_OP_I32_IS_LE_S,
  SSA_OP_I32_IS_LE_U,
  SSA_OP_I32_IS_LT_S,
  SSA_OP_I32_IS_LT_U,
  SSA_OP_I32_MUL,
  SSA_OP_I32_MUL_FULL_S,
  SSA_OP_I32_MUL_FULL_U,
  SSA_OP_I32_NEG,
  SSA_OP_I32_REV,
  SSA_OP_I32_ROL,
  SSA_OP_I32_ROR,
  SSA_OP_I32_SHL,
  SSA_OP_I32_SHR_S,
  SSA_OP_I32_SHR_U,
  SSA_OP_I32_SUB,
  SSA_OP_I32_TO_F32_BITWISE,
  SSA_OP_I32_TO_I5,
  SSA_OP_I32_TO_I6,
  SSA_OP_I32_TO_I64_S,
  SSA_OP_I32_TO_I64_U,
  SSA_OP_I64_ADD,
  SSA_OP_I64_BIT_AND,
  SSA_OP_I64_BIT_NOT,
  SSA_OP_I64_BIT_OR,
  SSA_OP_I64_BIT_XOR,
  SSA_OP_I64_CLZ,
  SSA_OP_I64_CTZ,
  SSA_OP_I64_IS_EQ,
  SSA_OP_I64_IS_LE_S,
  SSA_OP_I64_IS_LE_U,
  SSA_OP_I64_IS_LT_S,
  SSA_OP_I64_IS_LT_U,
  SSA_OP_I64_MUL,
  SSA_OP_I64_MUL_FULL_S,
  SSA_OP_I64_MUL_FULL_U,
  SSA_OP_I64_MUL_HI_S,
  SSA_OP_I64_MUL_HI_U,
  SSA_OP_I64_NEG,
  SSA_OP_I64_REV,
  SSA_OP_I64_ROL,
  SSA_OP_I64_ROR,
  SSA_OP_I64_SHL,
  SSA_OP_I64_SHR_S,
  SSA_OP_I64_SHR_U,
  SSA_OP_I64_SUB,
  SSA_OP_I64_TO_F64_BITWISE,
  SSA_OP_I64_TO_I32,
  SSA_OP_I64_TO_I5,
  SSA_OP_I64_TO_I6,
  SSA_OP_COUNT,
} SSA_Code;

typedef enum SSA_TyCode : U16 {
  SSA_TY_BOOL,
  SSA_TY_F32,
  SSA_TY_F64,
  SSA_TY_FUNPTR,
  SSA_TY_I32,
  SSA_TY_I5,
  SSA_TY_I6,
  SSA_TY_I64,
  SSA_TY_I8,
  SSA_TY_V256,
} SSA_TyCode;
